// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: devkit/v1/devkit.proto

package devkitv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/fahmifan/devkit/pkg/pb/devkit/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// DevkitServiceName is the fully-qualified name of the DevkitService service.
	DevkitServiceName = "devkit.v1.DevkitService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DevkitServicePingProcedure is the fully-qualified name of the DevkitService's Ping RPC.
	DevkitServicePingProcedure = "/devkit.v1.DevkitService/Ping"
	// DevkitServiceLoginProcedure is the fully-qualified name of the DevkitService's Login RPC.
	DevkitServiceLoginProcedure = "/devkit.v1.DevkitService/Login"
	// DevkitServiceRegisterProcedure is the fully-qualified name of the DevkitService's Register RPC.
	DevkitServiceRegisterProcedure = "/devkit.v1.DevkitService/Register"
)

// DevkitServiceClient is a client for the devkit.v1.DevkitService service.
type DevkitServiceClient interface {
	Ping(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.PingResponse], error)
	// Auth
	// Auth Mutation
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.CreatedResponse], error)
}

// NewDevkitServiceClient constructs a client for the devkit.v1.DevkitService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDevkitServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DevkitServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &devkitServiceClient{
		ping: connect.NewClient[v1.Empty, v1.PingResponse](
			httpClient,
			baseURL+DevkitServicePingProcedure,
			opts...,
		),
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+DevkitServiceLoginProcedure,
			opts...,
		),
		register: connect.NewClient[v1.RegisterRequest, v1.CreatedResponse](
			httpClient,
			baseURL+DevkitServiceRegisterProcedure,
			opts...,
		),
	}
}

// devkitServiceClient implements DevkitServiceClient.
type devkitServiceClient struct {
	ping     *connect.Client[v1.Empty, v1.PingResponse]
	login    *connect.Client[v1.LoginRequest, v1.LoginResponse]
	register *connect.Client[v1.RegisterRequest, v1.CreatedResponse]
}

// Ping calls devkit.v1.DevkitService.Ping.
func (c *devkitServiceClient) Ping(ctx context.Context, req *connect.Request[v1.Empty]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// Login calls devkit.v1.DevkitService.Login.
func (c *devkitServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Register calls devkit.v1.DevkitService.Register.
func (c *devkitServiceClient) Register(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.CreatedResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// DevkitServiceHandler is an implementation of the devkit.v1.DevkitService service.
type DevkitServiceHandler interface {
	Ping(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.PingResponse], error)
	// Auth
	// Auth Mutation
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.CreatedResponse], error)
}

// NewDevkitServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDevkitServiceHandler(svc DevkitServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	devkitServicePingHandler := connect.NewUnaryHandler(
		DevkitServicePingProcedure,
		svc.Ping,
		opts...,
	)
	devkitServiceLoginHandler := connect.NewUnaryHandler(
		DevkitServiceLoginProcedure,
		svc.Login,
		opts...,
	)
	devkitServiceRegisterHandler := connect.NewUnaryHandler(
		DevkitServiceRegisterProcedure,
		svc.Register,
		opts...,
	)
	return "/devkit.v1.DevkitService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DevkitServicePingProcedure:
			devkitServicePingHandler.ServeHTTP(w, r)
		case DevkitServiceLoginProcedure:
			devkitServiceLoginHandler.ServeHTTP(w, r)
		case DevkitServiceRegisterProcedure:
			devkitServiceRegisterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDevkitServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDevkitServiceHandler struct{}

func (UnimplementedDevkitServiceHandler) Ping(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.Ping is not implemented"))
}

func (UnimplementedDevkitServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.Login is not implemented"))
}

func (UnimplementedDevkitServiceHandler) Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.CreatedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.Register is not implemented"))
}
